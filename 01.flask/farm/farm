#!/usr/bin/env python3
#
# Farm REST API Client & Server Launcher
#
# To learn this CLI try:
#   ./farm -h
#   ./farm start -h
#   ./farm get -h
#
import sys
from argparse import ArgumentParser

def farm_stub( options ):
    '''
    Called when user executes ./farm
    '''
    ap.print_help()
    return

def farm_start( options ):
    '''
    Launch Farm REST API development server.
    Called when user executes, e.g.
    ./farm -c farm.cfg start
    '''
    from app import app, create_app, init_app

    app = create_app(options.config)
    init_app(app)
    try:
        app.run(host=app.config.get('FARM_IF'),
            port=int(app.config.get('FARM_PORT')))
    except Exception as e:
        print('Failed to start farm: ', str(e))
    return

def farm_get( options ):
    '''
    Farm REST API client.
    Performs HTTP GET
    '''
    from app import app, create_app
    from json import dumps
    from restc import rest_client

    app = create_app(options.config)
    iface = app.config.get('FARM_IF')
    port = app.config.get('FARM_PORT')
    cl = rest_client(iface, port, options.verbose)
    try:
        for uri in options.uri:
            (status_code, rdata) = cl.get(uri)
            #print('HTTP status code:', status_code)
            print('got back:', dumps(rdata, indent=4))

    except Exception as ex:
        print('Connection failed: ', str(ex))

    return

#
# argument parser
#
ap = ArgumentParser( 
    'farm',
    description= 'Farm REST API server.')
ap.add_argument(
    '-c',
    '--config',
    default='farm.cfg',
    help = 'Load configuration from CONFIG, defaults to farm.cfg')
ap.add_argument(
    '-v',
    '--verbose',
    action='store_true',
    default=False,
    help = 'Tell more about what is going on')
ap.set_defaults( func = farm_stub )

# start adding sub-commands
scp = ap.add_subparsers( help = 'Farm sub-commands' )

# start server sub-command
scp_start = scp.add_parser(
    'start',
    description = 'Start Farm REST API development server.',
    help = 'Start Farm REST API development server.  Not for production use. ' )

scp_start.set_defaults( func = farm_start )

# get sub-command
scp_get = scp.add_parser(
    'get',
    description = 'Issue HTTP GET to the farm server.',
    help = 'Issue GET request to the farm server. ' )
scp_get.add_argument('uri', nargs='+')
scp_get.set_defaults( func = farm_get )

# finally, parse the command line
pargs = ap.parse_args()
try:
    pargs.func( pargs )
except KeyboardInterrupt:
    print( 'Ctrl-C caught, aborting.' )
    sys.exit( 1 )
