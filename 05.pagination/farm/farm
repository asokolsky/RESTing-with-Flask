#!/usr/bin/env python3
#
# Farm REST API Client & Server Launcher
#
# To learn this CLI try:
#   ./farm -h
#   ./farm start -h
#   ./farm get -h
#   ./farm post -h
#   ./farm animal -h
#   ./farm stress -h
#
from argparse import ArgumentParser, Namespace
from json import dumps, loads, JSONDecodeError
# from logging import getLogger, CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
from multiprocessing import Pool
from os import getpid
from sys import exit, stderr
# from time import process_time
from typing import Any
from uuid import uuid4

from app import create_app, init_app
from restc import rest_client


def farm_stub(options: Namespace) -> None:
    '''
    Called when user executes ./farm
    '''
    ap.print_help()
    return


def farm_start(options: Namespace) -> None:
    '''
    Launch Farm REST API development server.
    Called when user executes, e.g.
    ./farm -c farm.cfg start
    '''

    print('Starting farm pid', str(getpid()))
    app = create_app(options.config)
    iface = app.config.get('FARM_IF')
    port = int(str(app.config.get('FARM_PORT')))
    init_app(app)
    try:
        app.run(
            host=iface,
            port=port,
            threaded=True,
            processes=1)

    except KeyboardInterrupt:
        print("Ctrl-C caught in farm start, aborting.", file=stderr)
        pass

    except Exception as e:
        print('Failed to start farm: ', str(e))

    return


def build_client(options: Namespace) -> rest_client:
    '''
    Load config file and build an instance of rest_client
    Returns a rest_client
    '''
    app = create_app(options.config)
    iface = str(app.config.get('FARM_IF'))
    port = int(str(app.config.get('FARM_PORT')))
    return rest_client(iface, port, options.verbose, options.include)


def farm_get(options: Namespace) -> None:
    '''
    Farm REST API client.
    Performs HTTP GET
    '''

    cl = build_client(options)
    params = {
        'page': options.page,
        'per_page': options.per_page
    }
    try:
        for uri in options.uri:
            status_code, rdata = cl.get(uri, params=params)
            # print('HTTP status code:', status_code)
            print('got back:', dumps(rdata, indent=4))

    except Exception as ex:
        print('Connection failed: ', str(ex))

    return


def farm_post(options: Namespace) -> None:
    '''
    Farm REST API client.
    Performs HTTP POST
    '''

    cl = build_client(options)
    try:
        da = loads(options.data)
        # id = da.get('id', None)
        # if id is None:
        da['id'] = str(uuid4())
        (status_code, rdata) = cl.post(options.uri, da)
        # print('HTTP status code:', status_code)
        print('got back:', dumps(rdata, indent=4))

    except JSONDecodeError:
        print('Data to post should be JSON.  id will be added.')

    except Exception as ex:
        print('Connection failed: ', str(ex))

    return


def animal_new(cl: rest_client, data: str, n: int) -> None:
    '''
    Try to create a new animal.
    In: data should be a meaningful JSON
    '''

    for i in range(0, n):
        da = loads(data)
        id = da.get('id', None)
        if id is None:
            da['id'] = str(uuid4())
        (status_code, rdata) = cl.post('/api/v1/animal', da)
        # print('HTTP status code:', status_code)
        print('got back:', dumps(rdata, indent=4))
        if status_code != 201:
            break
    return


def animal_get_all(cl: rest_client) -> Any:
    '''
    Retrieve all the animal records.
    Returns the list of all the animals.
    '''
    uri = '/api/v1/animal'
    params = {
        'page': 0,
        'per_page': 32
    }
    animals = []
    page = 0
    while True:
        page += 1
        (status_code, rdata) = cl.get(uri, params=params)
        if status_code != 200:
            break
        animals.extend(rdata)
        assert cl.resp is not None
        if int(cl.resp.headers.get('X-Total-Count', '0')) <= len(animals):
            break

    return animals


def animal_get(cl: rest_client, data: Any, options: Any) -> Any:
    '''
    Retrieve an animal record.
    In: data should be ID
    '''
    if data == 'all':
        return animal_get_all(cl)

    uri = '/api/v1/animal/' + data
    status_code, rdata = cl.get(uri)
    print('got back:', dumps(rdata, indent=4))
    return rdata


def animal_del(cl: rest_client, data) -> None:
    '''
    Delete an animal record.
    In: data should be ID
    '''

    if data == 'all':
        animal_del_all(cl)
        return

    (status_code, rdata) = cl.delete('/api/v1/animal/' + data)
    print('got back:', dumps(rdata, indent=4))
    return


def animal_del_all(cl: rest_client) -> None:
    '''
    Delete all the known animals!
    '''
    adata = animal_get_all(cl)
    for a in adata:
        id = a.get('id')
        animal_del(cl, id)
    return


def farm_animal(options: Namespace) -> None:
    '''
    Called when user executes ./farm animal
    '''

    cl = build_client(options)
    try:
        for da in options.data:
            if options.action == 'new':
                animal_new(cl, da, options.num)
            elif options.action == 'get':
                animal_get(cl, da, options)
            elif options.action == 'del':
                animal_del(cl, da)

    except JSONDecodeError:
        print('Data to post should be JSON.  id will be added.')

    except Exception as ex:
        print('Connection failed: ', str(ex))

    return


def farm_stressor(iface: str, port: int, verbose: bool,
                  incHeaders: bool) -> None:
    '''
    Stress the farm running at iface:port
    '''
    # global log
    # if(log is not None):
    #    level = 'WARNING'
    #    iLevel = getattr(logging, str(level), INFO)
    #    if isinstance(iLevel, int):
    #        print(getpid(), 'Logging level set to', iLevel, level)
    #        log.setLevel(iLevel)

    cl = rest_client(iface, port, verbose, incHeaders)
    # any animals out there to stress?
    ans = animal_get_all(cl)
    if len(ans) == 0:
        # if not - create one
        animal_new(cl, '{"species": "chicken", "sex": "female"}', 100)
    ans = animal_get_all(cl)
    if len(ans) == 0:
        return
    # we got an animal to stress - hopefully the same for all the stressors
    id = ans[0]['id']
    print(getpid(), 'animal id to stress', id)

    # pt1 = process_time()
    uri = '/api/v1/animal/' + id
    data = {"species": "chicken", "sex": "female"}
    for i in range(0, 1000):
        if data['sex'] == 'female':
            data['sex'] = 'male'
        else:
            data['sex'] = 'female'
        (status_code, rdata) = cl.put(uri, data)
        # print('got back:', status_code, dumps(rdata, indent=4))
    # pt2 = process_time()
    # print(getpid(), 'animal id to stress', id)

    return


def farm_stress(options: Namespace) -> None:
    '''
    Stress the farm server
    '''

    app = create_app(options.config)
    iface = app.config.get('FARM_IF')
    port = app.config.get('FARM_PORT')
    verbose = options.verbose
    incHeaders = options.include
    processes = options.processes

    p = Pool(processes)
    try:
        p.starmap(
            farm_stressor, [(iface, port, verbose, incHeaders)] * processes)
        p.close()
        p.join()

    except KeyboardInterrupt:
        print('farm_stress caught KeyboardInterrupt')
        pass
    except Exception as e:
        print('farm_stress caught:', str(e))
    finally:
        print('farm_stress finalized')
        pass

    return


#
# argument parser
#
ap = ArgumentParser(
    'farm',
    description='Farm REST API server.')
ap.add_argument(
    '-c',
    '--config',
    default='farm.cfg',
    help='Load configuration from CONFIG, defaults to farm.cfg')
ap.add_argument(
    '-v',
    '--verbose',
    action='store_true',
    default=False,
    help='Tell more about what is going on')
ap.add_argument(
    '-i',
    '--include',
    action='store_true',
    default=False,
    help='Include protocol headers in the output.')
ap.set_defaults(func=farm_stub)

# start adding sub-commands
scp = ap.add_subparsers(help='Farm sub-commands')

# start server sub-command
scp_start = scp.add_parser(
    'start',
    description='Start Farm REST API development server.',
    help='Start Farm REST API development server.  Not for production use. ')

scp_start.set_defaults(func=farm_start)

# get sub-command
help = 'Issue HTTP GET to the farm server, e.g. farm get /api/v1/animal'
scp_get = scp.add_parser('get', description=help, help=help)
scp_get.add_argument(
    '--page',
    type=int,
    default=1,
    help='1-based page number. Defaults to 1')
scp_get.add_argument(
    '--per-page',
    type=int,
    default=10,
    help='Number of records per page. Defaults to 10')
scp_get.add_argument('uri', nargs='+')
scp_get.set_defaults(func=farm_get)

help = '''Issue HTTP POST to the farm server, e.g.
farm post /api/v1/animal {"name":"fluffy"}'''
scp_post = scp.add_parser('post', description=help, help=help)
scp_post.add_argument('uri')
scp_post.add_argument('data')
scp_post.set_defaults(func=farm_post)

help = 'Issue animal commands.'
scp_animal = scp.add_parser('animal', description=help, help=help)
scp_animal.add_argument(
    'action',
    choices=['new', 'get', 'del'],
    help='Animal command, determines how data argument is interpreted.')
scp_animal.add_argument(
    '-n',
    '--num',
    type=int,
    default=1,
    help='Repeat command this many times. ' +
         'Defaults to the number of times the data is specified.')
scp_animal.add_argument(
    '--page',
    type=int,
    default=1,
    help='1-based page number. Defaults to 1')
scp_animal.add_argument(
    '--per-page',
    type=int,
    default=10,
    help='''Number of records per page. Defaults to 10''')
scp_animal.add_argument(
    'data',
    nargs='+',
    help='''Animal data. Must be JSON for new (ID will be added) or animal ID
for other commands or "all".''')
scp_animal.set_defaults(func=farm_animal)

help = 'Stress the farm'
scp_stress = scp.add_parser('stress', description=help, help=help)
scp_stress.add_argument(
    '-p',
    '--processes',
    type=int,
    default=1,
    help='''Use this many stress client processes to stress a farm server.
    Defaults to 1''')
scp_stress.set_defaults(func=farm_stress)

# finally, parse the command line
pargs = ap.parse_args()
try:
    pargs.func(pargs)
except KeyboardInterrupt:
    print('Ctrl-C caught, aborting.')
    exit(1)
